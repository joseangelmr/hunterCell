<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
      <title>Highcharts Example</title>
        <script type="text/javascript" src="js/jquery/jquery-1.11.2.min.js"></script>
        <script src="http://code.highcharts.com/highcharts.js"></script>
        <script src="http://rawgit.com/highslide-software/highcharts.com/master/js/modules/boost.src.js"></script>
        <script src = "https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
        <script src="http://maps.google.com/maps/api/js?sensor=false&libraries=geometry"></script>
        <script src="http://code.highcharts.com/modules/exporting.js"></script>

      <style type="text/css">
         ${demo.css}
      </style>
      <script type="text/javascript">
         $(function () {
         
         var column = [];
         var line = [];

         var start = 0;
         var datos = 0;
         
         //mapa
         HashMap = function(){
           this._dict = [];
         }
         HashMap.prototype._get = function(key){
           for(var i=0, couplet; couplet = this._dict[i]; i++){
             if(couplet[0] === key){
               return couplet;
             }
           }
         }
         HashMap.prototype.put = function(key, value){
           var couplet = this._get(key);
           if(couplet){
             couplet[1] = value;
           }else{
             this._dict.push([key, value]);
           }
           return this; // for chaining
         }
         HashMap.prototype.get = function(key){
           var couplet = this._get(key);
           if(couplet){
             return couplet[1];
           }
         }
         
         var map = new HashMap();
         
         
         function rad(x) {
            return x * Math.PI / 180;
         };
         
         function getDistance(p1, p2) {
            var R = 6378137;
            var dLat = rad(p2.lat() - p1.lat());
            var dLong = rad(p2.lng() - p1.lng());
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) * Math.sin(dLong / 2) * Math.sin(dLong / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c;
            return d;
         };
         

            var fileInput = document.getElementById('fileInput');
            fileInput.addEventListener('change', function(e) {
                 initialize();
         
            });
         
                 // funcion principal
                 function initialize() {
                     // inicializar lector de archivos
                     var fr = new FileReader();
                     //leer archivo de texto
                     var file = fileInput.files[0];
                     fr.readAsText(file);
             
             
                     fr.onload = function(e) {
                         var dat = fr.result;
                         if (dat === null || dat === undefined || dat === "") return;
             
                         // transformacion de archivo a JSON
                         var JSONObject = JSON.parse(dat);
                          
                          var size = Object.keys(JSONObject.mapa).length;
                          var keys = [];
         
         
                          var legs = JSONObject.legs;
         
                            var s = Object.keys(legs).length;

                            start = new Date().getTime();
         
                        _.each(JSONObject.legs, function(legs, index) {
                             
                                _.each(legs, function(leg, index) {
                                    if (index=='map'){
                                        var i = 0;
                                        var _pointAux = {};
                                        _pointAux.lat = 0;
                                        _pointAux.lng = 0;
                                        _pointAux.time = 0;
         
                                        _.each(leg, function(map, index) {
         
                                        var _lat = map.coordinates.lat;
                                        var _lng = map.coordinates.lng;
                                        var _time = map.date;
         
                                        if (_pointAux.lat != 0 && _pointAux.lng != 0 && _pointAux.time != 0){
                                            var p1 = new google.maps.LatLng(_pointAux.lat, _pointAux.lng);
                                            var p2 = new google.maps.LatLng(_lat, _lng);
                                            var diffTime = (_time - _pointAux.time)/1000;
                                            var num = getDistance(p1, p2)/diffTime;
                                            line.push(num);
                                        }else{
                                            line.push(0);
                                        }
         
         
                                        _pointAux.lat = _lat;
                                        _pointAux.lng = _lng;
                                        _pointAux.time = _time;
         
                                        i++;
         
                                       });
                                     }
                                     
                                });
                        });
                        var end = new Date().getTime();
                        var time = end - start;
                        console.log('Execution time1: ' + time);
                        //llenado de mapa
                        start = new Date().getTime();
                        var aux = {};
         
                            var test = JSONObject.hotspots_in_reg;
                                 // console.log(test);
                         _.each(JSONObject.hotspots_in_reg, function(item, index) {
                             map.put(item.macAddress, item);
                             aux[item.macAddress] = JSONObject.hotspots_in_reg[item.macAddress].id;
                             keys.push(item.macAddress);
                        });
         
         
                        var sortable = [];
                        for (var object in aux)
                              sortable.push([object, aux[object]])
                        sortable.sort(function(a, b) {return b[1] - a[1]})
         
                        var key = [];
                        var id = [];
                        for (var i = 0; i < sortable.length; i++) {
                            key.push(sortable[i][0]);
                            id.push(sortable[i][1]);
                        };

                         //comparador
                        var claves = [];
                          // _.each(keys, function(key, num) {
         
                            for (var i = 0; i < key.length; i++) {
         
                           
                                 var obj = {};
                                 obj.data = [];
         
         
                                 // obj.name = id[i] + 1;
                                 var a = id[i]+1;
                                  obj.name = a;
         
         
                                 obj.showInLegend = false;
                                // console.log("id "+obj.name);
         
                                 obj.color = '#5DC3BD';
         
         
                                    //por clave
                                    var inn = 0;
                                    var _data = [];
                                    var clave = [];
                                    var currentKey = key[i];
                                    // console.log("currentKey "+currentKey);
         
                                 _.each(JSONObject.mapa, function(item, index) {
                                        datos++;
                                        var found = 0;
                                        var idx = item.indexOf(currentKey);
                                        // console.log(idx);
                                        if (idx!= -1)
                                            _data.push(1);
                                        else
                                            _data.push(0);
                                 });
         
                                        obj.data = _data;
                                        column.push(obj);
                           };
                        var salida = {};
                        var da = [];
                        var m = [];

                        var ap = [];
                        for (var i = 0; i < Object.keys(column).length; i++) {

                            da = [];
                            ap.push(i.toString());
                            // salida[i+1] = column[i].data;
                            // console.log();

                            // da.push(i+1);
                            var object = new Object();
                            object = column;

                            // console.log(object[i].data);
                            da.push(i.toString());
                            var datico = object[i].data;
                            for (var j = 0; j < datico.length; j++) {
                                // console.log(datico);
                                
                                da.push(datico[j]);
                            };
                            da.push(" ");
                            m.push(da);

                        };


                            
                            var aux = {};
                            aux.role = "annotation";

                            ap.push(aux);
                            m.push(ap);
                            

                        console.log(JSON.stringify(m));



                        console.log(Object.keys(column).length);
                        var end = new Date().getTime();
                        var time = end - start;
                        console.log('Execution time2: ' + time + " con "+datos+" datos");
         
                        var series = [];
                        series.push(column);
                        
                        var sub = {};
                        // console.log(column);
                        start = new Date().getTime();
         
                        var chart = new Highcharts.Chart({
                                
         
                             chart: {
                                renderTo: 'container',
                                defaultSeriesType: 'column',
                                zoomType: 'x'
                                },
                                title: {
                                    text: 'Hunter Cell'
                                },
                                xAxis: [{
                                    title: {
                                        text: 'Scans'
                                    }
                                }],
                                yAxis: [{ // Primary yAxis
                                min: 0,
                                labels: {
                                    format: '{value}',
                                    style: {
                                        color: Highcharts.getOptions().colors[1]
                                    }
                                },
                                title: {
                                    text: 'Speed (m/s)',
                                    style: {
                                        color: Highcharts.getOptions().colors[1]
                                    }
                                },
                                stackLabels: {
                                     enabled: true,
                                     style: {
                                         fontWeight: 'bold',
                                         color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                     }
                                 }
                                }, { // Secondary yAxis
                                title: {
                                    text: '',
                                    style: {
                                        color: Highcharts.getOptions().colors[0]
                                    }
                                },
                                labels: {
                                    format: '{value} ms',
                                    style: {
                                        color: Highcharts.getOptions().colors[0]
                                    }
                                },
                                opposite: true
                                }],
                                scrollbar: {
                                enabled: true
                                },
                                plotOptions: {
                                     column: {
                                         stacking: 'normal',
                                         dataLabels: {
                                             enabled: true,
                                             color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                                             formatter: function() {
                                                if (this.y === 0) {
                                                    return null;
                                                }
                                                return this.series.name;
                                            },
                                             style: {
                                                 textShadow: '0 0 3px black'
                                             }
                                         },
                                     }
                                 },
                                 series : column
                         });
                        chart.addSeries({
                            type:'line',
                            data: line,
                            showInLegend: false
                        });

                        var end = new Date().getTime();
                        var time = end - start;
                        console.log('Execution time3: ' + time);
                        // });
                     } // on load
                 } // initialize
            });
      </script>
   </head>
   <body>
      <input type="file" id="fileInput" multiple="true">
      <!-- <button id="toggle">Toggle legend</button> -->
      <!-- <input type="file" id="file" name="file[]" multiple />
   <button onclick="ReadFiles();">Read Files</button> -->
      <!-- <button id="btn">add column</button> -->
      <div id="container" style="min-width: 310px; height: 100%; margin: 0 auto"></div>
   </body>
</html>